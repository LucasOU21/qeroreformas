---
// Import the necessary components
import SecualOptions from "@/components/ui/forms/SecualOptions.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import { SITE } from "@data/constants";


interface categoriaInstalación {
  id: string;
  nombre: string;
  svg: string;
  instalaciones: Instalacion[];
  beneficios: string[];
}

interface Instalacion {
  id?: string;
  nombre: string;
  subtipos?: subTipoInstalacion[];
  tipoUnidad?: "unidad" | "metro lineal";
  precio?: number;
}

interface subTipoInstalacion {
  id: string;
  nombre: string;
  tipoUnidad: "unidad" | "metro lineal";
  precio: number;
}


const tipoInstalacion: categoriaInstalación[] = [
  {
    id: "estandar",
    nombre: "Estándar",
    svg: "estandar",
    beneficios: [
      "Instalación rápida y eficiente",
      "Ajustes esenciales para un buen acabado",
      "Servicio confiable a un precio accesible",
    ],
    instalaciones: [
      {
        nombre: "Muebles",
        subtipos: [
          { id:"mueblesaltos", nombre: "Muebles Altos", precio: 90, tipoUnidad: "metro lineal" },
          { id:"mueblesbajo", nombre: "Muebles Bajos", precio: 90, tipoUnidad: "metro lineal" },
          { id:"torresdebaldas", nombre: "Torres de baldas", precio: 120, tipoUnidad: "metro lineal" },
          { id:"rodapie", nombre: "Rodapiés", precio: 5, tipoUnidad: "metro lineal" },
          { id:"encimerademadera", nombre: "Encimera de madera", precio: 45, tipoUnidad: "metro lineal" },
          { id:"copete", nombre: "Copete", precio: 3, tipoUnidad: "metro lineal" },
          { id:"panelesembellecedores", nombre: "Paneles Embellecedores", precio: 20, tipoUnidad: "unidad" },
        ],
      },
      {
        nombre: "Electrodomésticos Encastrables",
        subtipos: [
          { id:"vitroceramica",nombre: "Vitrocerámica", precio: 15, tipoUnidad: "unidad" },
          { id:"horno",nombre: "Horno", precio: 15, tipoUnidad: "unidad" },
          { id:"microondas",nombre: "Microondas", precio: 15, tipoUnidad: "unidad" },
          { id:"lavadora",nombre: "Lavadora", precio: 15, tipoUnidad: "unidad" },
          { id:"calientaplatos",nombre: "Calientaplatos", precio: 15, tipoUnidad: "unidad" },
          { id:"vinoteca",nombre: "Vinoteca", precio: 15, tipoUnidad: "unidad" },
          { id:"nevera",nombre: "Nevera", precio: 20, tipoUnidad: "unidad" },
          { id:"lavavajillas",nombre: "Lavavajillas", precio: 15, tipoUnidad: "unidad" },
          { id:"campanadecorativa",nombre: "Campana Decorativa", precio: 40, tipoUnidad: "unidad" },
        ],
      },
      {
        nombre: "Electrodomésticos Integrados",
        subtipos: [
          { id:"lavavajillasPanelado", nombre: "Lavavajillas Panelado", precio: 40, tipoUnidad: "unidad" },
          { id:"lavadoraPanelado", nombre: "Lavadora Panelado", precio: 40, tipoUnidad: "unidad" },
          { id:"frigorificoPanelado", nombre: "Frigorifico Panelado", precio: 80, tipoUnidad: "unidad" },
          { id:"campanaextractoraIntegrada", nombre: "Campana Extractora Integrada", precio: 30, tipoUnidad: "unidad" },
        ],
      },
      { id:"fregadero", nombre: "Fregadero", precio: 50, tipoUnidad: "unidad" },
    ],
  },
  {
    id: "premium",
    nombre: "Premium",
    svg: "premium",
    beneficios: [
      "Ajustes finos en cortes y alineaciones",
      "Nivelación exacta para una estética impecable",
      "Cuidado extra en cada unión y terminación",
    ],
    instalaciones: [
      {
        nombre: "Muebles",
        subtipos: [
          { id:"mueblesaltos", nombre: "Muebles Altos", precio: 90, tipoUnidad: "metro lineal" },
          { id:"mueblesbajo", nombre: "Muebles Bajos", precio: 90, tipoUnidad: "metro lineal" },
          { id:"torresdebaldas", nombre: "Torres de baldas", precio: 120, tipoUnidad: "metro lineal" },
          { id:"rodapie", nombre: "Rodapiés", precio: 5, tipoUnidad: "metro lineal" },
          { id:"encimerademadera", nombre: "Encimera de madera", precio: 45, tipoUnidad: "metro lineal" },
          { id:"copete", nombre: "Copete", precio: 3, tipoUnidad: "metro lineal" },
          { id:"panelesembellecedores", nombre: "Paneles Embellecedores", precio: 20, tipoUnidad: "unidad" },
        ],
      },
      {
        nombre: "Electrodomésticos Encastrables",
        subtipos: [
          { id:"vitroceramica",nombre: "Vitrocerámica", precio: 15, tipoUnidad: "unidad" },
          { id:"horno",nombre: "Horno", precio: 15, tipoUnidad: "unidad" },
          { id:"microondas",nombre: "Microondas", precio: 15, tipoUnidad: "unidad" },
          { id:"lavadora",nombre: "Lavadora", precio: 15, tipoUnidad: "unidad" },
          { id:"calientaplatos",nombre: "Calientaplatos", precio: 15, tipoUnidad: "unidad" },
          { id:"vinoteca",nombre: "Vinoteca", precio: 15, tipoUnidad: "unidad" },
          { id:"nevera",nombre: "Nevera", precio: 20, tipoUnidad: "unidad" },
          { id:"lavavajillas",nombre: "Lavavajillas", precio: 15, tipoUnidad: "unidad" },
          { id:"campanadecorativa",nombre: "Campana Decorativa", precio: 40, tipoUnidad: "unidad" },
        ],
      },
      {
        nombre: "Electrodomésticos Integrados",
        subtipos: [
          { id:"lavavajillasPanelado", nombre: "Lavavajillas Panelado", precio: 40, tipoUnidad: "unidad" },
          { id:"lavadoraPanelado", nombre: "Lavadora Panelado", precio: 40, tipoUnidad: "unidad" },
          { id:"frigorificoPanelado", nombre: "Frigorifico Panelado", precio: 80, tipoUnidad: "unidad" },
          { id:"campanaextractoraIntegrada", nombre: "Campana Extractora Integrada", precio: 30, tipoUnidad: "unidad" },
        ],
      },
      { id:"fregadero", nombre: "Fregadero", precio: 50, tipoUnidad: "unidad" },
    ],
  },
];

const pageTitle: string =
  Astro.currentLocale === "en"
    ? `Quotes | ${SITE.title}`
    : `Presupuestos | ${SITE.title}`;
---

<!--Utilizing MainLayout for the outer layout of the page, and defining meta for SEO purposes-->
<MainLayout
  title={pageTitle}
  structuredData={{
    "@context": "https://schema.org",
    "@type": "WebPage",
    "@id": "https://Kaliareformas.com/faqs",
    url: "https://Kaliareformas.com/faqs",
    name: "Presupuestos | Kalia Reformas",
    description:
      "¿Tiene alguna pregunta o quiere hablar de un proyecto? Póngase en contacto con nosotros y déjenos elaborar la solución perfecta utilizando nuestras herramientas y servicios.",
    isPartOf: {
      "@type": "WebSite",
      url: "https://Kaliareformas.com",
      name: "Kalia Reformas",
      description:
        "Elegir a Kalia Reformas y Decoración significa optar por un servicio profesional, personalizado y de calidad con un enfoque en el ahorro y la eficiencia. Transformamos espacios con dedicación y pasión, asegurándonos de que tu hogar sea tan único como tú, y lo hacemos cuidando tu bolsillo. ¡Déjanos ayudarte a hacer realidad la cocina, los muebles y el hogar que siempre soñaste! Contáctanos y descubre por qué somos la mejor opción para tus reformas y proyectos en el hogar.",
    },
    inLanguage: "es-ES",
  }}
>
  <!-- Fixed spacing to prevent overlap with navbar -->
  <div class="pt-32"></div>
  
  <section
    id="calculator"
    class="mx-auto flex max-w-4xl min-h-[calc(100vh-250px)] flex-col justify-center px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <h2
      class="text-center text-2xl font-bold text-neutral-800 dark:text-neutral-200 md:text-3xl md:leading-tight"
    >
      <Fragment
        set:html={Astro.currentLocale === "en"
          ? "Budget calculator"
          : "Calculadora para tus Presupuestos"}
      />
    </h2>
    <div
      class="mx-auto my-8 flex min-w-[100%] max-w-screen-md items-start justify-center md:min-w-[50%]"
    >
      <div class="w-full">
        <div class="flex w-full items-center">
          <div
            id="oneStepNumber"
            class="mx-[-1px] flex h-7 w-7 shrink-0 items-center justify-center rounded-full bg-[#daa520] dark:bg-[#daa520]"
          >
            <span class="text-sm font-bold text-white dark:text-black">1</span>
          </div>
          <div
            id="oneStepBar"
            class="mx-4 h-[3px] w-full rounded-lg bg-gray-400"
          >
          </div>
        </div>
        <div class="mr-4 mt-2">
          <h6 class="text-sm font-bold text-[#daa520] dark:text-[#daa520]">
            Paquete
          </h6>
          <p
            id="oneStepStatus"
            class="hidden text-xs text-gray-500 dark:text-white"
          >
            Seleccionada
          </p>
        </div>
      </div>
      <div class="w-full">
        <div class="flex w-full items-center">
          <div
            id="twoStepNumber"
            class="mx-[-1px] flex h-7 w-7 shrink-0 items-center justify-center rounded-full bg-gray-400"
          >
            <span class="text-sm font-bold text-white dark:text-black">2</span>
          </div>
          <div
            id="twoStepBar"
            class="mx-4 h-[3px] w-full rounded-lg bg-gray-400"
          >
          </div>
        </div>
        <div class="mr-4 mt-2">
          <h6
            id="twoStepText"
            class="text-sm font-bold text-gray-800 dark:text-gray-400"
          >
            Servicios
          </h6>
          <p
            id="twoStepStatus"
            class="hidden text-xs text-gray-500 dark:text-white"
          >
            Agregados
          </p>
        </div>
      </div>
      <div>
        <div class="flex items-center">
          <div
            id="threeStepNumber"
            class="mx-[-1px] flex h-7 w-7 shrink-0 items-center justify-center rounded-full bg-gray-400"
          >
            <span class="text-sm font-bold text-white dark:text-black">3</span>
          </div>
        </div>
        <div class="mt-2">
          <h6 id="threeStepText" class="text-sm font-bold text-gray-800 dark:text-gray-400">
            Presupuesto
          </h6>
          <p
            id="threeStepStatus"
            class="hidden text-xs text-gray-500 dark:text-white"
          >
            Enviado
          </p>
        </div>
      </div>
    </div>
    <div
      id="categoriaInstalacion"
      class="mx-auto mb-8 flex flex-1 min-h-[224px] min-w-[100%] max-w-screen-lg items-center justify-center transition duration-300"
    >
      <div class="mx-auto flex min-w-[100%] max-w-screen-md items-center justify-center">
        <div class="flex flex-col md:flex-row w-full items-center justify-center gap-8">
          {
            tipoInstalacion.map((i) => (
              <button
                id={i.id}
                class="p-5 min-w-[305px] flex cursor-pointer flex-col items-center justify-between gap-2 rounded-lg border border-gray-200 bg-white shadow-sm transition duration-300 hover:scale-105 hover:border-[#daa520] dark:border-gray-700 dark:bg-gray-800 dark:hover:border-[#daa520]"
              >
                <div>
                  {i.svg === "estandar" && (
                  <svg
                    class="mx-auto text-[#daa520] dark:text-[#daa520]"
                    xmlns="http://www.w3.org/2000/svg"
                    width="48"
                    height="48"
                    viewBox="0 0 24 24"
                  >
                    <g fill="none" stroke="currentColor" stroke-width="1.5">
                      <path
                        stroke-linecap="round"
                        d="M8 13h8c1.71 0 3.15 1.28 3.35 2.98L20 21.5M8 13c-1.71 0-3.15 1.28-3.35 2.98L4 21.5M8 13v5c0 1.886 0 2.828.586 3.414S10.114 22 12 22s2.828 0 3.414-.586S16 19.886 16 18v-1"
                      />
                      <circle cx="12" cy="6" r="4" />
                    </g>
                  </svg>

                )}
                {i.svg === "premium" && (
                  <svg
                    class="mx-auto text-[#daa520] dark:text-[#daa520]"
                    xmlns="http://www.w3.org/2000/svg"
                    width="48"
                    height="48"
                    viewBox="0 0 24 24"
                  >
                    <g fill="none" stroke="currentColor" stroke-width="1.5">
                      <path d="M12 16c-5.76 0-6.78-5.74-6.96-10.294c-.051-1.266-.076-1.9.4-2.485c.475-.586 1.044-.682 2.183-.874A26.4 26.4 0 0 1 12 2c1.784 0 3.253.157 4.377.347c1.139.192 1.708.288 2.184.874s.45 1.219.4 2.485C18.781 10.26 17.761 16 12.001 16Z" />
                      <path stroke-linecap="round" d="M12 16v3" opacity="0.5" />
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M15.5 22h-7l.34-1.696a1 1 0 0 1 .98-.804h4.36a1 1 0 0 1 .98.804z"
                      />
                      <path
                        d="m19 5l.949.316c.99.33 1.485.495 1.768.888S22 7.12 22 8.162v.073c0 .86 0 1.291-.207 1.643s-.584.561-1.336.98L17.5 12.5M5 5l-.949.316c-.99.33-1.485.495-1.768.888S2 7.12 2 8.162v.073c0 .86 0 1.291.207 1.643s.584.561 1.336.98L6.5 12.5"
                        opacity="0.5"
                      />
                      <path d="M11.146 6.023C11.526 5.34 11.716 5 12 5s.474.34.854 1.023l.098.176c.108.194.162.29.246.354c.085.064.19.088.4.135l.19.044c.738.167 1.107.25 1.195.532s-.164.577-.667 1.165l-.13.152c-.143.167-.215.25-.247.354s-.021.215 0 .438l.02.203c.076.785.114 1.178-.115 1.352c-.23.174-.576.015-1.267-.303l-.178-.082c-.197-.09-.295-.135-.399-.135s-.202.045-.399.135l-.178.082c-.691.319-1.037.477-1.267.303s-.191-.567-.115-1.352l.02-.203c.021-.223.032-.334 0-.438s-.104-.187-.247-.354l-.13-.152c-.503-.588-.755-.882-.667-1.165c.088-.282.457-.365 1.195-.532l.19-.044c.21-.047.315-.07.4-.135c.084-.064.138-.16.246-.354z" />
                      <path stroke-linecap="round" d="M18 22H6" opacity="0.5" />
                    </g>
                  </svg>
                )}
                  <h5 class="mt-1 text-center text-xl font-semibold tracking-tight text-gray-900 dark:text-white">
                    {i.nombre}
                  </h5>
                </div>

                  <ul class="flex flex-col justify-start gap-y-1 mt-1">
                    {
                      i.beneficios.map((b: any) => (
                        <li class="flex items-center text-xs text-neutral-600 dark:text-neutral-200 text-left">
                          <span class="text-[#daa520] mr-1">✓</span> {b}
                        </li>
                      ))
                    }
                  </ul>
              </button>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Productos Estandar -->
    <div
      id="subTiposInstalacionEstandar"
      class="mx-auto mb-8 hidden min-w-[100%] max-w-screen-md items-start transition duration-300 md:min-w-[50%]"
    >
      <form class="mx-auto flex max-w-sm flex-col items-center">
        <label
          for="subtiposEstandar"
          class="mb-2 block w-[80%] text-sm font-medium text-gray-900 dark:text-white"
          >Añade tus productos</label
        >
        <select
          id="subtiposEstandar"
          class="block w-[80%] rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-[#daa520] focus:ring-[#daa520] dark:border-gray-700 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400 dark:focus:border-[#daa520] dark:focus:ring-[#daa520]"
        >
          <option selected disabled>Seleccionar</option>
          {
            tipoInstalacion[0].instalaciones.map((i: any) =>
              (i.subtipos !== undefined) ?
               (
                  <option value={i.nombre} disabled>{i.nombre}</option>
                  <SecualOptions options={i.subtipos}/>
              ) : (<option value={i.precio} data-nombre={i.id} data-unidad={i.tipoUnidad}>{i.nombre}</option>)
          )
          }
        </select>
      </form>
    </div>
    <!--  -->

    <!-- Productos Premium -->
    <div
      id="subTiposInstalacionPremium"
      class="mx-auto mb-8 hidden min-w-[100%] max-w-screen-md items-start transition duration-300 md:min-w-[50%]"
    >
      <form class="mx-auto flex max-w-sm flex-col items-center">
        <label
          for="subtiposPremium"
          class="mb-2 block w-[80%] text-sm font-medium text-gray-900 dark:text-white"
          >Añade tus servicios</label
        >
        <select
          id="subtiposPremium"
          class="block w-[80%] rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-[#daa520] focus:ring-[#daa520] dark:border-gray-700 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400 dark:focus:border-[#daa520] dark:focus:ring-[#daa520]"
        >
          <option selected disabled>Seleccionar</option>
          {
            tipoInstalacion[1].instalaciones.map((i: any) => {
              if (i.subtipos !== undefined) {
               return (
                <option value={i.nombre} disabled>{i.nombre}</option>
                <SecualOptions options={i.subtipos}/>
              )
              }else{
                return (<option value={i.precio} data-nombre={i.id} data-unidad={i.tipoUnidad}>{i.nombre}</option>)
              }
            })
          }
        </select>
      </form>
    </div>
    <!--  -->

    <div
      id="productListContainer"
      class="hidden mx-auto w-full max-w-md rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800 sm:p-8"
    >
      <div class="mb-4 flex items-center justify-center">
        <h5 class="text-lg font-bold leading-none text-gray-900 dark:text-white">
          Lista de Servicios -
        </h5>
        <span id="seTitle" class="hidden text-lg font-bold leading-none text-[#daa520] dark:text-[#daa520]">&nbsp;Estándar</span>
        <span id="spTitle" class="hidden text-lg font-bold leading-none text-[#daa520] dark:text-[#daa520]">&nbsp;Premium</span>
      </div>
      <div class="flow-root">
        <ul id="productList" role="list" class="divide-y divide-gray-200 dark:divide-gray-700">
        </ul>

        <ul role="list" class=" divide-gray-200 dark:divide-gray-700">
          <hr class="bg-gray-800" />
          <li class="pt-3 sm:py-4">
            <div class="flex items-center">
              <div class="ms-4 min-w-0 flex-1">
                <p
                  class="truncate text-sm font-medium text-gray-900 dark:text-white"
                >
                  Total
                </p>
              </div>
              <div
                class="inline-flex items-center text-base font-semibold text-gray-900 dark:text-white"
              >
                <input class="border-none max-w-[250px] text-right focus:outline-none focus:ring-0 focus:border-transparent dark:bg-gray-800" type="number" id="totalPresupuesto" value="0" readonly/> €
              </div>
            </div>
          </li>
          <li class="text-xs text-gray-500 dark:text-gray-400 border-t-0 text-right"><strong class="text-gray-900 dark:text-white">und:</strong> unidad / <strong class="text-gray-900 dark:text-white">ml:</strong> metro lineal</li>
        </ul>
      </div>
    </div>

    <!-- Replace your existing form element with this updated version -->
    <form id="formPresupuesto" class="hidden mx-auto w-full max-w-md rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800">
      <label class="text-lg font-bold leading-none text-gray-900 dark:text-white">Te atenderemos</label>
      <div class="mb-6 mt-4">
        <label for="nombre" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Nombre*</label>
        <input type="text" id="nombre" name="nombre" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Tu nombre" required />
      </div> 
      <div class="grid gap-6 mb-6 md:grid-cols-2 mt-4">
        <div>
          <label for="telefono" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Teléfono*</label>
          <input 
            type="tel" 
            id="telefono" 
            name="telefono" 
            pattern="[6-9]\d{8}"
            maxlength="9"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
            placeholder="Ej: 612345678" 
            required 
          />
        </div>
        <div>
          <label for="codigopostal" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Código Postal*</label>
          <input 
            type="text" 
            id="codigopostal" 
            name="codigopostal" 
            pattern="[0-9]{5}"
            maxlength="5"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
            placeholder="Ej: 28001" 
            required 
          />
        </div>  
      </div>
      <div class="mb-6">
        <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
        <input 
          type="email" 
          id="email" 
          name="email" 
          class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
          placeholder="tu@email.com" 
        />
      </div>
    
      <div class="flex items-center justify-between mt-6">
        <button 
          type="button" 
          id="form-back-button"
          
        class="w-full min-w-[100px] items-center justify-center gap-x-2 whitespace-nowrap rounded-lg border border-transparent bg-yellow-500 p-3 text-sm font-bold text-white outline-none ring-yellow-500 transition duration-300 hover:bg-yellow-600 focus-visible:ring disabled:pointer-events-none disabled:opacity-50 dark:bg-yellow-700 dark:hover:bg-yellow-600 dark:focus:outline-none dark:focus:ring-1 sm:w-auto mr-2"
        >

          Atrás
        </button>
        <button 
          type="submit" 
          id="enviarMail"
          
            class="w-full min-w-[100px] items-center justify-center gap-x-2 whitespace-nowrap rounded-lg border border-transparent bg-yellow-500 p-3 text-sm font-bold text-white outline-none ring-yellow-500 transition duration-300 hover:bg-yellow-600 focus-visible:ring disabled:pointer-events-none disabled:opacity-50 dark:bg-yellow-700 dark:hover:bg-yellow-600 dark:focus:outline-none dark:focus:ring-1 sm:w-auto mr-2"
            >

          Enviar
        </button>
      </div>
    </form>

  <div
  id="finalMessage"
  class="hidden mx-auto w-full max-w-md min-h-[20rem] rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800 sm:p-8 flex-col items-center justify-center"
>
  <svg class="w-20 h-20 mx-auto mb-4 text-[#daa520]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
  <h5 class="text-lg font-bold text-center text-gray-900 dark:text-white">¡Gracias! Nos pondremos en contacto</h5>
</div>

  <div class="mx-auto my-8 flex max-w-screen-md items-start">
    <div class="w-full">
      <div class="flex w-full items-center justify-between gap-4">
        <button
          id="one-b-button"
          class="hidden w-full min-w-[100px] items-center justify-center gap-x-2 whitespace-nowrap rounded-lg border border-transparent bg-[#daa520] p-3 text-sm font-bold text-white outline-none ring-zinc-500 transition duration-300 hover:bg-[#c09018] focus-visible:ring disabled:pointer-events-none disabled:opacity-50 dark:bg-[#daa520] dark:text-black dark:ring-zinc-200 dark:hover:bg-[#c09018] dark:focus:outline-none dark:focus:ring-1 sm:w-auto"
          >Atrás</button
        >
        <button>
          <button
          id="reset"
          class="hidden w-full min-w-[100px] items-center justify-center gap-x-2 whitespace-nowrap rounded-lg border border-transparent bg-[#daa520] p-3 text-sm font-bold text-white outline-none ring-zinc-500 transition duration-300 hover:bg-[#c09018] focus-visible:ring disabled:pointer-events-none disabled:opacity-50 dark:bg-[#daa520] dark:text-black dark:ring-zinc-200 dark:hover:bg-[#c09018] dark:focus:outline-none dark:focus:ring-1 sm:w-auto"
          >
          Reiniciar
        </button>
        <button
            id="two-a-button"
            class="hidden w-full min-w-[100px] items-center justify-center gap-x-2 whitespace-nowrap rounded-lg border border-transparent bg-[#daa520] p-3 text-sm font-bold text-white outline-none ring-zinc-500 transition duration-300 hover:bg-[#c09018] focus-visible:ring disabled:pointer-events-none disabled:opacity-50 dark:bg-[#daa520] dark:text-black dark:ring-zinc-200 dark:hover:bg-[#c09018] dark:focus:outline-none dark:focus:ring-1 sm:w-auto"
            >
            Siguiente
          </button>

        </button>
      </div>
    </div>
  </div>
</section>
</MainLayout>

<script is:inline>

  const style = document.createElement('style');
    style.textContent = `
      input[type="number"]::-webkit-outer-spin-button,
      input[type="number"]::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;    
      }
    `;
    document.head.appendChild(style);

  //Contenedores
  let catI = "";
  const categoriaInstalacion = document.getElementById("categoriaInstalacion");
  const subTiposInstalacionEstandar = document.getElementById("subTiposInstalacionEstandar");
  const subTiposInstalacionPremium = document.getElementById("subTiposInstalacionPremium");
  let productListContainer = document.getElementById("productListContainer");
  let staticPLClone = productListContainer.cloneNode(true);
  const finalMessage = document.getElementById("finalMessage");
  const formPresupuesto = document.getElementById("formPresupuesto");
  
  // Pasarela
  const twoStepNumber = document.getElementById("twoStepNumber");
  const threeStepNumber = document.getElementById("threeStepNumber");
  const oneStepBar = document.getElementById("oneStepBar");
  const twoStepBar = document.getElementById("twoStepBar");
  const oneStepStatus = document.getElementById("oneStepStatus");
  const twoStepStatus = document.getElementById("twoStepStatus");
  const threeStepStatus = document.getElementById("threeStepStatus");
  const twoStepText = document.getElementById("twoStepText"); 
  const threeStepText = document.getElementById("threeStepText"); 
  
  //Botones
  const oneBeforeBtn = document.getElementById("one-b-button");
  const reset = document.getElementById("reset");

  const premiumBtn = document.getElementById("premium");
  const estandarBtn = document.getElementById("estandar");
  const twoAfterBtn = document.getElementById("two-a-button");

  const mailBtn = document.getElementById("enviarMail");
  
  //Calcular Presupuesto
  const subtiposEstandar = document.getElementById("subtiposEstandar");
  const subtiposPremium = document.getElementById("subtiposPremium");

  //================ Parte 1 ====================
  premiumBtn.addEventListener("click", () => {
    catI = "premium";
    //Actualizar Barra de Navegación
    oneStepBar.classList.add("bg-[#daa520]");
    oneStepBar.classList.add("dark:bg-[#daa520]");
    oneStepStatus.classList.remove("hidden");
    twoStepNumber.classList.add("bg-[#daa520]");
    twoStepNumber.classList.add("dark:bg-[#daa520]");
    twoStepText.classList.add("text-[#daa520]");
    twoStepText.classList.add("dark:text-[#daa520]");
    twoStepText.classList.remove("text-gray-800");
    twoStepText.classList.remove("dark:text-gray-400");

    //Actualziar Botones
    oneBeforeBtn.classList.add("inline-flex");
    oneBeforeBtn.classList.remove("hidden");
    twoAfterBtn.classList.add("inline-flex");
    twoAfterBtn.classList.remove("hidden");

    //Actualizar contenedores
    categoriaInstalacion.classList.add("hidden");
    subTiposInstalacionPremium.classList.remove("hidden");
    productListContainer.classList.remove("hidden");

    const spTitle = document.getElementById("spTitle");
    spTitle.classList.remove("hidden");
  });

  estandarBtn.addEventListener("click", () => {
    catI = "estandar";
    //Actualizar Barra de Navegación
    oneStepBar.classList.add("bg-[#daa520]");
    oneStepBar.classList.add("dark:bg-[#daa520]");
    oneStepStatus.classList.remove("hidden");
    twoStepNumber.classList.add("bg-[#daa520]");
    twoStepNumber.classList.add("dark:bg-[#daa520]");
    twoStepText.classList.add("text-[#daa520]");
    twoStepText.classList.add("dark:text-[#daa520]");
    twoStepText.classList.remove("text-gray-800");
    twoStepText.classList.remove("dark:text-gray-400");

    //Actualizar Botones
    oneBeforeBtn.classList.add("inline-flex");
    oneBeforeBtn.classList.remove("hidden");
    twoAfterBtn.classList.add("inline-flex");
    twoAfterBtn.classList.remove("hidden");

    //Actualizar contenedores
    categoriaInstalacion.classList.add("hidden");
    subTiposInstalacionEstandar.classList.remove("hidden");
    productListContainer.classList.remove("hidden");

    const seTitle = document.getElementById("seTitle");
    seTitle.classList.remove("hidden");
  });


// Get the form back button element
const formBackButton = document.getElementById("form-back-button");

// Add event listener to the form back button
formBackButton.addEventListener("click", () => {
  // Hide the form
  formPresupuesto.classList.add("hidden");
  
  // Show the product list container
  productListContainer.classList.remove("hidden");
  
  // Show the appropriate subtype container based on the selected category
  if (catI === "premium") {
    subTiposInstalacionPremium.classList.remove("hidden");
  } else if (catI === "estandar") {
    subTiposInstalacionEstandar.classList.remove("hidden");
  }
  
  // Update the navigation UI
  twoStepBar.classList.remove("bg-[#daa520]");
  twoStepBar.classList.remove("dark:bg-[#daa520]");
  twoStepStatus.classList.add("hidden");
  
  threeStepNumber.classList.remove("bg-[#daa520]");
  threeStepNumber.classList.remove("dark:bg-[#daa520]");
  
  threeStepText.classList.remove("text-[#daa520]");
  threeStepText.classList.remove("dark:text-[#daa520]");
  threeStepText.classList.add("text-gray-800");
  threeStepText.classList.add("dark:text-gray-400");
  
  // Show the appropriate buttons
  oneBeforeBtn.classList.add("inline-flex");
  oneBeforeBtn.classList.remove("hidden");
  
  twoAfterBtn.classList.add("inline-flex");
  twoAfterBtn.classList.remove("hidden");
  
  mailBtn.classList.add("hidden");
});


  //============== Parte 2 =================
  oneBeforeBtn.addEventListener("click", () => {
    //Actualizar Barra de Navegación
    oneStepBar.classList.remove("bg-[#daa520]");
    oneStepBar.classList.remove("dark:bg-[#daa520]");
    oneStepStatus.classList.add("hidden");

    twoStepNumber.classList.remove("bg-[#daa520]");
    twoStepNumber.classList.remove("dark:bg-[#daa520]");
    twoStepText.classList.remove("text-[#daa520]");
    twoStepText.classList.remove("dark:text-[#daa520]");
    twoStepText.classList.add("text-gray-800");
    twoStepText.classList.add("dark:text-gray-400");
    
    //Actualizar Botones
    oneBeforeBtn.classList.add("hidden");
    oneBeforeBtn.classList.remove("inline-flex");
    
    categoriaInstalacion.classList.remove("hidden");
    categoriaInstalacion.classList.add("inline-flex");
    
    twoAfterBtn.classList.add("hidden");
    twoAfterBtn.classList.remove("inline-flex");
    
    //Actualizar contenedores
    categoriaInstalacion.classList.remove("hidden");
    productListContainer.classList.add("hidden");

    catI === "premium"
    ? subTiposInstalacionPremium.classList.add("hidden")
    : subTiposInstalacionEstandar.classList.add("hidden");
    catI = "";

    // document.getElementById("seTitle") ?? document.getElementById("seTitle").classList.add("hidden");
    // document.getElementById("spTitle") ?? document.getElementById("spTitle").classList.add("hidden");

    const parent = productListContainer.parentElement;
    const newContainer = staticPLClone.cloneNode(true);
    parent.replaceChild(newContainer, productListContainer);
    productListContainer = newContainer; 

  });

const accionSeleccion = function(event) {
  // Obtener el valor seleccionado
  const valorSeleccionado = event.target.value;
  
  // Obtener el texto de la opción seleccionada
  const textoSeleccionado = (event.target.options[event.target.selectedIndex].text).trim();
  const nombre = event.target.options[event.target.selectedIndex].dataset.nombre;
  const unidad = event.target.options[event.target.selectedIndex].dataset.unidad;

  const productList = document.getElementById("productList");
  
  if(productList.querySelector("#quantity-input-"+nombre)) return;
  productList.insertAdjacentHTML('beforeend', `<li class="py-2 sm:py-4" id="product-item-${nombre}">
          <div class="flex items-center">
            <div class="min-w-0 flex-1">
              <p
                class="truncate text-sm font-medium text-gray-900 dark:text-white nombreProducto"
              >
                ${textoSeleccionado}
              </p>
              <p class="truncate text-sm text-gray-500 dark:text-gray-400">
                precio: <span class="precioProducto">${unidad === "metro lineal" ? Number(valorSeleccionado).toFixed(2) : valorSeleccionado}</span> € / <span class="tipoUnidad">${unidad === "unidad" ? "und." : ""}
                ${unidad === "metro lineal" ? "ml" : ""} </span>
              </p>
            </div>
            ${
              unidad === "unidad"
              ? 
              `<form class="mx-auto max-w-xs">
              <div class="relative flex max-w-[10rem] items-center">
                <button
                  type="button"
                  id=${"decrement-button-"+nombre}
                  data-input-counter-decrement="quantity-input"
                  class="h-11 rounded-s-lg border border-gray-300 bg-gray-100 p-3 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-100 dark:border-gray-600 dark:bg-gray-700 dark:hover:bg-gray-600 dark:focus:ring-gray-700"
                >
                  <svg
                    class="h-3 w-3 text-gray-900 dark:text-white"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 18 2"
                  >
                    <path
                      stroke="currentColor"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M1 1h16"></path>
                  </svg>
                </button>
                <input
                  type="number"
                  id=${"quantity-input-"+nombre}
                  value="0"
                  min="0"
                  readonly
                  onkeydown="return event.keyCode !== 69"
                  data-input-counter
                  aria-describedby="helper-text-explanation"
                  class="block h-11 w-full border-x-0 border-gray-300 bg-gray-50 py-2.5 text-center text-sm text-gray-900 focus:border-[#daa520] focus:ring-[#daa520] dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-[#daa520] dark:focus:ring-[#daa520]"
                  required
                />
                <button
                  type="button"
                  id=${"increment-button-"+nombre}
                  data-input-counter-increment="quantity-input"
                  class="h-11 rounded-e-lg border border-gray-300 bg-gray-100 p-3 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-100 dark:border-gray-600 dark:bg-gray-700 dark:hover:bg-gray-600 dark:focus:ring-gray-700"
                >
                  <svg
                    class="h-3 w-3 text-gray-900 dark:text-white"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 18 18"
                  >
                    <path
                      stroke="currentColor"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 1v16M1 9h16"></path>
                  </svg>
                </button>
              </div>
            </form>`
            : 
            `<form class="mx-auto max-w-xs" submit="return false">
              <div class="relative flex max-w-[10rem] items-center">
                 <input
                  type="number"
                  id=${"quantity-input-"+nombre}
                  value="0"
                  min="0"
                  step="any"
                  onkeydown="return event.keyCode !== 69"
                  data-input-counter
                  aria-describedby="helper-text-explanation"
                  class="block h-11 w-full border-x-0 border-gray-300 bg-gray-50 py-2.5 text-center text-sm text-gray-900 focus:border-[#daa520] focus:ring-[#daa520] dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-[#daa520] dark:focus:ring-[#daa520]"
                  required/>
              </div>
            </form>`
            }
            <button 
              type="button" 
              class="delete-product ml-2 rounded-lg text-red-500 hover:bg-red-100 p-1 transition-colors duration-200 dark:hover:bg-red-900/30" 
              data-product-id="${nombre}"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </li>`);

        // Add delete button functionality
        const deleteButtons = document.querySelectorAll('.delete-product');
        deleteButtons.forEach(button => {
          button.addEventListener('click', function() {
            const productId = this.getAttribute('data-product-id');
            const productItem = document.getElementById(`product-item-${productId}`);
            const quantityInput = document.getElementById(`quantity-input-${productId}`);
            const total = document.getElementById("totalPresupuesto");
            
            // Update total before removing
            const valorItem = Number(valorSeleccionado);
            let valueToSubtract = 0;
            
            if (unidad === "unidad") {
              valueToSubtract = valorItem * Number(quantityInput.value);
            } else if (unidad === "metro lineal") {
              valueToSubtract = valorItem * parseFloat(localStorage.getItem(`${productId}`) || 0);
              localStorage.removeItem(`${productId}`);
            }
            
            total.value = (Number(total.value) - valueToSubtract).toFixed(2);
            if (parseFloat(total.value) <= 0) total.value = 0;
            
            // Remove the product from the list
            productItem.remove();
          });
        });

        if(unidad === "unidad"){
          const increment = document.getElementById(`increment-button-${nombre}`)
        const decrement = document.getElementById(`decrement-button-${nombre}`)
        
        if(!(productList.contains(increment)) || !(productList.contains(decrement))) return;
        const number = document.getElementById(`quantity-input-${nombre}`);
        const total = document.getElementById("totalPresupuesto");
        
        increment.addEventListener("click",()=>{
          const valorItem = Number(valorSeleccionado);
          const numeroActual = Number(number.value) || 0;
          const totalActual = Number(total.value) || 0;
          number.value = numeroActual + 1
          total.value = totalActual + valorItem;
        })

        decrement.addEventListener("click",()=>{
          const valorItem = Number(valorSeleccionado);
          const numeroActual = Number(number.value) || 0;
          const totalActual = Number(total.value) || 0;
          if(numeroActual - 1 < 0) return;
          number.value = numeroActual - 1
          total.value = totalActual - valorItem;
        })
        }else if(unidad === "metro lineal"){
          const number = document.getElementById(`quantity-input-${nombre}`);
          if(!(productList.contains(number))) return;
          const total = document.getElementById("totalPresupuesto");
          localStorage.setItem(`${nombre}`, 0);
          const valorItem = Number(valorSeleccionado);
          const accionInput = (e) => {
            e.preventDefault();                         
            total.value = (parseFloat(total.value) || 0) - (parseFloat(localStorage.getItem(`${nombre}`)) * valorItem);
            if(parseFloat(total.value) <= 0) total.value = 0;
            if(isNaN(parseInt(number.value))) return;
            total.value = (parseFloat(total.value) || 0) + ((parseFloat(number.value) || 0) * valorItem);
            localStorage.setItem(`${nombre}`, parseFloat(number.value) || 0);
          }
          number.addEventListener("input", accionInput);
          number.addEventListener("change", accionInput);
        }

}

subtiposEstandar.addEventListener('change', accionSeleccion)

subtiposPremium.addEventListener('change', accionSeleccion)

//========= Parte 3 =============
twoAfterBtn.addEventListener("click", () => {

  const total = document.getElementById("totalPresupuesto");
  const totalActual = Number(total.value) || 0;

  if(totalActual <= 0) {
    alert("Debes agregar algunos productos");
    return;
  };

    totalGuardado = totalActual;
    //Actualizar Barra de Navegación
    twoStepBar.classList.add("bg-[#daa520]");
    twoStepBar.classList.add("dark:bg-[#daa520]");
    twoStepStatus.classList.remove("hidden");

    threeStepNumber.classList.add("bg-[#daa520]");
    threeStepNumber.classList.add("dark:bg-[#daa520]");

    threeStepText.classList.add("text-[#daa520]");
    threeStepText.classList.add("dark:text-[#daa520]");
    threeStepText.classList.remove("text-gray-800");
    threeStepText.classList.remove("dark:text-gray-400");

    //Actualizar Botones
    oneBeforeBtn.classList.remove("inline-flex");
    oneBeforeBtn.classList.add("hidden");

    twoAfterBtn.classList.remove("inline-flex");
    twoAfterBtn.classList.add("hidden");

    formBackButton.classList.add("inline-flex");
    formBackButton.classList.remove("hidden");

    mailBtn.classList.remove("hidden");

    //contenedores
    catI === "premium"
    ? subTiposInstalacionPremium.classList.add("hidden")
    : subTiposInstalacionEstandar.classList.add("hidden");
    categoriaInstalacion.classList.add("hidden");

    productListContainer.classList.add("hidden");
    formPresupuesto.classList.remove("hidden");
  });

  formPresupuesto.addEventListener("submit", function (e) {
    e.preventDefault();

    let productListContainer = document.getElementById("productListContainer");
    const newProductList = productListContainer.cloneNode(true);
    newProductList.classList.remove("hidden");
    let textoCorreo = "";
    let totalElement = newProductList.querySelector("#totalPresupuesto");
    let total = totalElement ? totalElement.value : "0";
    let instalacion = catI === "premium" ? "Premium" : "Estándar";

    try {
      let productos = newProductList.querySelectorAll("#productList li"); // Selecciona todos los productos
      if (productos.length === 0) throw new Error("No se encontraron productos en la lista.");

      productos.forEach((producto, i) => {
          try {
              let nombre = producto.querySelector("p.nombreProducto")?.textContent.trim() || "Producto sin nombre";
              let precioTexto = producto.querySelector(".precioProducto")?.textContent.trim() || "Precio no disponible";
              let tipoUnidad = producto.querySelector(".tipoUnidad")?.textContent.trim() || "Unidad no disponible";
              let inputCantidad = producto.querySelector("input[type='number']");
              let cantidad = inputCantidad ? parseFloat(inputCantidad.value, 10) : 0;
            
              // Solo incluir productos que tengan al menos 1 unidad seleccionada
              if (cantidad > 0) {
                  textoCorreo += `<tr><td>${i + 1}</td><td>${nombre}</td><td>${tipoUnidad}</td><td>${cantidad}</td><td>${precioTexto} €</td><td>${(parseFloat(precioTexto) * parseFloat(cantidad)).toFixed(2)} €</td></tr>`;
                  // textoCorreo[i] = {
                  //     id: i + 1,
                  //     nombre,
                  //     precio,
                  //     cantidad,
                  //     total: String(Number(precio) * Number(cantidad)),
                  //     tipoUnidad
                  // }
              }
          } catch (error) {
              console.error(`Error al procesar un producto: ${error.message}`);
          }
      });
  } catch (error) {
      console.error(`Error al obtener la lista de productos: ${error.message}`);
      return "Error al generar el listado de productos.";
  }
  
    const formData = new FormData(this); 
    const data = Object.fromEntries(formData.entries());

      let templateParams = {
        cliente: data.nombre,
        telefono: data.telefono,
        fecha: new Date().toLocaleDateString(),
        productos: textoCorreo,
        costodirecto: parseFloat(total).toFixed(2),
        costofinal: parseFloat(total).toFixed(2),
        email: data.email,
        instalacion,
        codigopostal: data.codigopostal
      };    
      // console.log(templateParams);

      emailjs.send("service_8t7pklm","template_j3im9z6", templateParams)
      .then(function(response) {
          formPresupuesto.classList.add("hidden");
          finalMessage.classList.remove("hidden");
          finalMessage.classList.add("flex");
          threeStepStatus.classList.remove("hidden");
          reset.classList.remove("hidden");
          console.log("Correo enviado", response);
      }, function(error) {
          console.error("Error", error);
      });
  })

  reset.addEventListener("click", () => {

    oneStepBar.classList.remove("bg-[#daa520]");
    oneStepBar.classList.remove("dark:bg-[#daa520]");
    oneStepStatus.classList.add("hidden");
    twoStepNumber.classList.remove("bg-[#daa520]");
    twoStepNumber.classList.remove("dark:bg-[#daa520]");
    twoStepBar.classList.remove("bg-[#daa520]");
    twoStepBar.classList.remove("dark:bg-[#daa520]");
    twoStepStatus.classList.add("hidden");
    threeStepNumber.classList.remove("bg-[#daa520]");
    threeStepNumber.classList.remove("dark:bg-[#daa520]");
    threeStepStatus.classList.add("hidden");

    twoStepText.classList.remove("text-[#daa520]");
    twoStepText.classList.remove("dark:text-[#daa520]");
    twoStepText.classList.add("text-gray-800");
    twoStepText.classList.add("dark:text-gray-400");
    threeStepText.classList.remove("text-[#daa520]");
    threeStepText.classList.remove("dark:text-[#daa520]");
    threeStepText.classList.add("text-gray-800");
    threeStepText.classList.add("dark:text-gray-400");

    //contenedores
    finalMessage.classList.add("hidden");
    categoriaInstalacion.classList.remove("hidden");
    reset.classList.add("hidden");
    const parent = productListContainer.parentElement;
    const newContainer = staticPLClone.cloneNode(true);
    parent.replaceChild(newContainer, productListContainer);
    productListContainer = newContainer; 
    catI = "";
  })

// Add this to the end of your calculadora.astro file inside a <script> tag
  
 

// Add this validation logic to your JavaScript section

// Form validation setup
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('formPresupuesto');
  const nombreField = document.getElementById('nombre');
  const phoneField = document.getElementById('telefono');
  const postalCodeField = document.getElementById('codigopostal');
  const emailField = document.getElementById('email');
  const submitButton = document.getElementById('enviarMail');
  
  // Track if fields have been interacted with
  const fieldInteracted = {
    nombre: false,
    telefono: false,
    codigopostal: false,
    email: false
  };

  if (!form) return;

  // Helper function to validate postal code (Spanish format)
  function isValidSpanishPostalCode(code) {
    const regex = /^\d{5}$/;
    return regex.test(code);
  }

  // Helper function to validate email (optional field)
  function isValidEmail(email) {
    if (!email) return true; // Email is optional
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  }

  // Handle phone number - only allow up to 9 digits, but no validation
  if (phoneField) {
    phoneField.removeAttribute('pattern');
    
    phoneField.addEventListener('input', function(e) {
      // Only restrict to 9 digits maximum, but allow any input
      if (this.value.length > 9) {
        this.value = this.value.substring(0, 9);
      }
      validateForm();
    });
    
    phoneField.addEventListener('blur', function() {
      fieldInteracted.telefono = true;
      validateForm();
    });
  }

  if (postalCodeField) {
    postalCodeField.addEventListener('input', function(e) {
      // Keep only digits and limit to 5 characters
      let value = e.target.value.replace(/\D/g, '');
      if (value.length > 5) {
        value = value.substring(0, 5);
      }
      e.target.value = value;
      validateForm();
    });
    
    postalCodeField.addEventListener('blur', function() {
      fieldInteracted.codigopostal = true;
      validateForm();
    });
  }

  if (emailField) {
    emailField.addEventListener('input', validateForm);
    emailField.addEventListener('blur', function() {
      fieldInteracted.email = true;
      validateForm();
    });
  }

  if (nombreField) {
    nombreField.addEventListener('input', validateForm);
    nombreField.addEventListener('blur', function() {
      fieldInteracted.nombre = true;
      validateForm();
    });
  }

  // Validate the entire form
  function validateForm() {
    let isValid = true;
    
    // Only validate fields that have been interacted with or when form is submitted
    
    // Required field validations
    if (fieldInteracted.nombre) {
      if (!nombreField.value.trim()) {
        isValid = false;
        highlightInvalid(nombreField);
      } else {
        highlightValid(nombreField);
      }
    }

    // No validation for phone number - always considered valid
    highlightValid(phoneField);

    if (fieldInteracted.codigopostal) {
      if (!isValidSpanishPostalCode(postalCodeField.value)) {
        isValid = false;
        highlightInvalid(postalCodeField);
      } else {
        highlightValid(postalCodeField);
      }
    }

    // Email is optional but must be valid if provided
    if (fieldInteracted.email && emailField.value.trim()) {
      if (!isValidEmail(emailField.value)) {
        isValid = false;
        highlightInvalid(emailField);
      } else {
        highlightValid(emailField);
      }
    } else {
      highlightValid(emailField);
    }

    // Check if form should be submittable (all required fields have values)
    const formSubmittable = 
      nombreField.value.trim() && 
      phoneField.value.trim() && 
      isValidSpanishPostalCode(postalCodeField.value) &&
      (emailField.value.trim() === "" || isValidEmail(emailField.value));
      
    // Update submit button state
    submitButton.disabled = !formSubmittable;
    submitButton.classList.toggle('opacity-50', !formSubmittable);
    submitButton.classList.toggle('cursor-not-allowed', !formSubmittable);
    
    return isValid;
  }

  // Highlight functions
  function highlightInvalid(field) {
    field.classList.add('border-red-500');
    field.classList.add('focus:border-red-500');
    field.classList.add('focus:ring-red-500');
    field.classList.remove('border-gray-300');
    field.classList.remove('focus:border-blue-500');
    field.classList.remove('focus:ring-blue-500');
    field.classList.remove('dark:border-gray-600');
  }

  function highlightValid(field) {
    field.classList.remove('border-red-500');
    field.classList.remove('focus:border-red-500');
    field.classList.remove('focus:ring-red-500');
    field.classList.add('border-gray-300');
    field.classList.add('focus:border-blue-500');
    field.classList.add('focus:ring-blue-500');
    field.classList.add('dark:border-gray-600');
  }

  // Form submission handling
  form.addEventListener('submit', function(e) {
    // Prevent default submission and validate
    e.preventDefault();
    
    if (!validateForm()) {
      // Show error message if needed
      alert('Por favor, revisa los campos marcados en rojo');
      return false;
    }

    // If all validations pass, proceed with your existing emailjs logic
    let productListContainer = document.getElementById("productListContainer");
    const newProductList = productListContainer.cloneNode(true);
    newProductList.classList.remove("hidden");
    let textoCorreo = "";
    let totalElement = newProductList.querySelector("#totalPresupuesto");
    let total = totalElement ? totalElement.value : "0";
    let instalacion = catI === "premium" ? "Premium" : "Estándar";

    try {
      let productos = newProductList.querySelectorAll("#productList li");
      if (productos.length === 0) throw new Error("No se encontraron productos en la lista.");

      productos.forEach((producto, i) => {
        try {
          let nombre = producto.querySelector("p.nombreProducto")?.textContent.trim() || "Producto sin nombre";
          let precioTexto = producto.querySelector(".precioProducto")?.textContent.trim() || "Precio no disponible";
          let tipoUnidad = producto.querySelector(".tipoUnidad")?.textContent.trim() || "Unidad no disponible";
          let inputCantidad = producto.querySelector("input[type='number']");
          let cantidad = inputCantidad ? parseFloat(inputCantidad.value, 10) : 0;
          
          // Solo incluir productos que tengan al menos 1 unidad seleccionada
          if (cantidad > 0) {
            textoCorreo += `<tr><td>${i + 1}</td><td>${nombre}</td><td>${tipoUnidad}</td><td>${cantidad}</td><td>${precioTexto} €</td><td>${(parseFloat(precioTexto) * parseFloat(cantidad)).toFixed(2)} €</td></tr>`;
          }
        } catch (error) {
          console.error(`Error al procesar un producto: ${error.message}`);
        }
      });
    } catch (error) {
      console.error(`Error al obtener la lista de productos: ${error.message}`);
      alert("Error al generar el listado de productos.");
      return false;
    }
    
    const formData = new FormData(this); 
    const data = Object.fromEntries(formData.entries());

    let templateParams = {
      cliente: data.nombre,
      telefono: data.telefono,
      fecha: new Date().toLocaleDateString(),
      productos: textoCorreo,
      costodirecto: parseFloat(total).toFixed(2),
      costofinal: parseFloat(total).toFixed(2),
      email: data.email || 'Sin correo',
      instalacion,
      codigopostal: data.codigopostal
    };

    // Show loading indicator
    submitButton.disabled = true;
    submitButton.textContent = "Enviando...";
    
    // Remove the old email
    // Change recipient email to qeroreformas@gmail.com
    templateParams.to_email = "qeroreformas@gmail.com";
    
    // Add a flag to prevent duplicate submissions
    if (form.dataset.submitted === "true") {
      console.log("Form already submitted, preventing duplicate submission");
      return false;
    }
    
    // Mark the form as submitted
    form.dataset.submitted = "true";
    
    emailjs.send("service_8t7pklm", "template_j3im9z6", templateParams)
      .then(function(response) {
        formPresupuesto.classList.add("hidden");
        finalMessage.classList.remove("hidden");
        finalMessage.classList.add("flex");
        threeStepStatus.classList.remove("hidden");
        reset.classList.remove("hidden");
        console.log("Correo enviado", response);
      }, function(error) {
        console.error("Error", error);
        alert("Ha ocurrido un error al enviar el correo. Por favor, inténtalo de nuevo más tarde.");
        submitButton.disabled = false;
        submitButton.textContent = "Enviar";
        // Reset the submission flag on error so they can try again
        form.dataset.submitted = "false";
      });
  });

  // Initial validation
  validateForm();
});

</script>
