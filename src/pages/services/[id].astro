---
// Import section components
import MainLayout from "@/layouts/MainLayout.astro";
import ProductTabBtn from "@components/ui/buttons/ProductTabBtn.astro";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@data/constants";

import imageNotFound from "@images/image-not-found.webp"

// Global declaration for gsap animation library
declare global {
  interface Window {
    gsap: any;
  }
}

// This gets the static paths for all the unique products
export async function getStaticPaths() {
  const productEntries = await getCollection("products", ({ id }) =>
    id.startsWith("es/")
  );
  return productEntries.map((product) => {
    const idWithoutLang = product.id.replace(/^es\//, ""); // Remove the "en/" prefix
    return {
      params: { id: idWithoutLang },
      props: { product },
    };
  });
}

const { product } = Astro.props;

const dataSrcL: string[] | [] = Array.from(product.data.specificationsLeft!).map(
  (s: any) => s.subTitle.src
);
const dataSrcR: string[] | [] = Array.from(product.data.specificationsRight!).map(
  (s: any) => s.subTitle.src
);

const dataSrc = dataSrcL.concat(dataSrcR) ?? [];

const pageTitle: string = `${product.data.title} | ${SITE.title}`;
---

<MainLayout title={pageTitle}>
  <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div>

  <section
    class="mx-auto flex max-w-[85rem] flex-col px-4 py-10 pt-28 sm:px-6 lg:px-8 lg:py-14 lg:pt-32 2xl:max-w-full bg-[#F8F1E7] dark:bg-neutral-800"
  >
    <div>
      <p
        id="fadeText"
        class="mb-4 max-w-prose text-pretty font-medium text-neutral-900 dark:text-neutral-100 sm:text-xl font-poppins"
      >
        {product.data.main.content}
      </p>
      
      <!-- Moved CTA button here, right below the fadeText paragraph -->
      <div class="mb-8">
        <PrimaryCTA
          title={product.data.longDescription.btnTitle || "ContÃ¡ctanos"}
          url={product.data.longDescription.btnURL || "/contacto"}
        />
      </div>
    </div>
    
    <div
      class="flex flex-col items-center justify-between gap-2 space-y-4 sm:flex-row sm:space-y-0 lg:gap-4"
    >
      <div id="fadeInUp">
        <h1
          class="block text-2xl font-bold tracking-tighter text-neutral-800 dark:text-neutral-200 sm:text-5xl md:text-4xl lg:text-6xl font-georgia"
        >
          {product.data.title}
        </h1>
        <p class="mt-3 text-lg text-neutral-800 dark:text-neutral-200 font-poppins">
          {product.data.description}
        </p>
      </div>
      <div>
        <Image
          id="fadeInMoveRight"
          src={product.data.main.imgMain}
          class="w-[1000px] rounded-md shadow-md shadow-neutral-400 dark:shadow-neutral-600"
          alt={product.data.main.imgAlt}
          format={"avif"}
          loading={"eager"}
        />
      </div>
    </div>
  </section>

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14 bg-[#F8F1E7] dark:bg-neutral-800">
    <nav
      class="mx-auto grid max-w-6xl gap-y-px sm:flex sm:gap-x-4 sm:gap-y-0 font-poppins"
      aria-label="Tabs"
      role="tablist"
    >
      {
        product.data.tabs.map((tab, index) => (
          <ProductTabBtn
            title={tab.title}
            id={tab.id}
            dataTab={tab.dataTab}
            first={index === 0}
          />
        ))
      }
    </nav>

    <div class="mt-12 md:mt-16">
      <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2">
            <div class="lg:w-3/4">
              <h2
                class="text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:leading-tight lg:text-4xl font-georgia"
              >
                {product.data.longDescription.title}
              </h2>
              <p
                class="mt-3 text-pretty text-neutral-800 dark:text-neutral-200 font-poppins"
              >
                {product.data.longDescription.subTitle}
              </p>
              
              <!-- Removed CTA button from here as it's now placed above -->
            </div>

            <div class="space-y-4 lg:space-y-6 font-poppins">
              {
                product.data.descriptionList.map((list) => (
                  <div class="flex">
                    <div>
                      <h3 class="text-base font-bold text-neutral-800 dark:text-neutral-200 sm:text-lg font-georgia">
                        {list.title}
                      </h3>
                      {list.subTitle.map((st: any) => (
                        <p class="mt-1 text-neutral-800 dark:text-neutral-200 font-poppins">
                          {st.parrafo}
                        </p>
                      ))}
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <div id="tabs-with-card-2" class="hidden" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid w-full grid-cols-1 gap-x-16 md:grid-cols-2">
            <div class="space-y-6 font-poppins">
              {
                product.data.specificationsLeft!.map((spec) => (
                  <div>
                    <h3 class="block font-bold text-neutral-800 dark:text-neutral-200 font-georgia">
                      {spec.title}
                    </h3>
                    <Image
                      src={spec.subTitle}
                      class="h-full w-full cursor-pointer rounded-md object-cover object-center shadow-md shadow-neutral-400 transition-transform duration-300 dark:shadow-neutral-600"
                      alt={spec.title}
                      format={"jpg"}
                      data-fullscreen-src={spec.subTitle}
                      loading="lazy"
                    />
                  </div>
                ))
              }
            </div>
            {
              product.data.specificationsRight ? (
                <div class="mt-6 space-y-6 md:ml-auto md:mt-0 font-poppins">
                  {product.data.specificationsRight!.map((spec) => (
                    <div>
                      <h3 class="block font-bold text-neutral-800 dark:text-neutral-200 font-georgia">
                        {spec.title}
                      </h3>
                      <Image
                        src={spec.subTitle}
                        class="h-full w-full cursor-pointer rounded-md object-cover object-center shadow-md shadow-neutral-400 transition-transform duration-300 dark:shadow-neutral-600"
                        alt={spec.title}
                        format={"jpg"}
                        data-fullscreen-src={spec.subTitle}
                        loading="lazy"
                      />
                    </div>
                  ))}
                </div>
              ) : product.data.tableData ? (
                <div class="mt-6 space-y-6 md:ml-auto md:mt-0 font-poppins">
                  <div class="flex flex-col">
                    <div class="-m-1.5 overflow-x-auto">
                      <div class="inline-block min-w-full p-1.5 align-middle">
                        <div class="overflow-hidden">
                          <table class="min-w-full divide-y divide-neutral-300 dark:divide-neutral-700">
                            <thead>
                              <tr>
                                {product.data.tableData?.[0].feature?.map(
                                  (header) => (
                                    <th
                                      scope="col"
                                      class="px-6 py-3 text-start text-xs font-medium uppercase text-neutral-500 dark:text-neutral-500 font-georgia"
                                    >
                                      {header}
                                    </th>
                                  )
                                )}
                              </tr>
                            </thead>
                            <tbody class="divide-y divide-neutral-300 dark:divide-neutral-700">
                              {product.data.tableData?.map((row) =>
                                // Wrap each row's content in a separate <tr> element
                                row.description.map((rowData) => (
                                  <tr>
                                    {/* Iterate through each cell value in the row's description array */}
                                    {rowData.map((cellValue) => (
                                      // Render each cell value in its own <td> element
                                      <td class="whitespace-nowrap px-6 py-4 text-sm font-medium text-neutral-800 dark:text-neutral-200 font-poppins">
                                        {cellValue}
                                      </td>
                                    ))}
                                  </tr>
                                ))
                              )}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null
            }
          </div>
        </div>
      </div>
    </div>
  </div>

  <div
    id="fullscreen-modal"
    class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-90"
  >
    <img
      id="fullscreen-image"
      src=""
      alt="Imagen en pantalla completa"
      class="max-w-screen absolute left-1/2 top-1/2 max-h-screen -translate-x-1/2 -translate-y-1/2 transform object-contain"
    />
    <button
      id="close-modal"
      class="absolute right-4 top-4 cursor-pointer text-3xl font-bold text-white font-poppins"
    >
      Close
    </button>
    <button
      id="right-modal"
      class="text-shadow-md absolute right-6 top-1/2 cursor-pointer text-xl font-extrabold text-white font-poppins"
    >
      Next
    </button>
    <button
      id="left-modal"
      class="text-shadow-md absolute left-6 top-1/2 cursor-pointer text-xl font-extrabold text-white font-poppins"
    >
      Prev
    </button>
  </div>
</MainLayout>

<style>
  /* Define custom color variables */
  :root {
    --color-beige-bg: #F8F1E7;
    --color-gold: #FFD000;
    --font-heading: Georgia, serif;
    --font-body: 'Poppins', sans-serif;
  }

  .font-georgia {
    font-family: var(--font-heading);
  }

  .font-poppins {
    font-family: var(--font-body);
  }

  /* Make gold color more prominent in active tab states */
  :global(.hs-tab-active) {
    border-color: var(--color-gold) !important;
    box-shadow: 0 4px 12px rgba(255, 208, 0, 0.15) !important;
  }

  :global(.dark .hs-tab-active) {
    border-color: var(--color-gold) !important;
    background-color: rgba(255, 208, 0, 0.1) !important;
  }

  /* Update all CTA buttons */
  :global(.primary-cta) {
    background-color: var(--color-gold) !important;
    color: #000000 !important;
    font-family: var(--font-body) !important;
    transition: all 0.3s ease;
  }

  :global(.primary-cta:hover) {
    background-color: #E0B800 !important;
    transform: translateY(-2px);
  }
</style>

<script>
  import { gsap } from "gsap";

  type AnimationSettings = {
    autoAlpha?: number;
    y?: number;
    x?: number;
    willChange?: string;
  };

  function setElementAnimationDefaults(
    id: string,
    settings: AnimationSettings
  ) {
    gsap.set(id, settings);
  }

  setElementAnimationDefaults("#fadeText", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInUp", {
    autoAlpha: 0,
    y: 50,
    willChange: "transform, opacity",
  });

  setElementAnimationDefaults("#fadeInMoveRight", {
    autoAlpha: 0,
    x: 300,
    willChange: "transform, opacity",
  });

  let timeline = gsap.timeline({ defaults: { overwrite: "auto" } });

  timeline.to("#fadeText", {
    duration: 1.5,
    autoAlpha: 1,
    y: 0,
    delay: 1,
    ease: "power2.out",
  });

  timeline.to(
    "#fadeInUp",
    { duration: 1.5, autoAlpha: 1, y: 0, ease: "power2.out" },
    "-=1.2"
  );

  timeline.to(
    "#fadeInMoveRight",
    { duration: 1.5, autoAlpha: 1, x: 0, ease: "power2.inOut" },
    "-=1.4"
  );

  timeline.to("#overlay", { duration: 1, autoAlpha: 0, delay: 0.2 });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    function setButtonInactive(btn: any, activeButton: any) {
      if (btn !== activeButton) {
        btn.classList.remove(
          "active",
          "bg-neutral-100",
          "hover:border-transparent",
          "dark:bg-white/[.05]"
        );

        const tabId = btn.getAttribute("data-target");
        if (tabId) {
          const contentElement = document.querySelector(tabId);
          if (contentElement) {
            contentElement.classList.add("hidden");
          }
        }

        changeHeadingStyle(
          btn,
          ["text-neutral-800", "dark:text-neutral-200"],
          ["text-[#FFD000]", "dark:text-[#FFD000]"]
        );
      }
    }

    function activateButton(button: any) {
      button.classList.add(
        "active",
        "bg-neutral-100",
        ",hover:border-transparent",
        "dark:bg-white/[.05]"
      );

      const tabId = button.getAttribute("data-target");
      if (tabId) {
        const contentElementToShow = document.querySelector(tabId);
        if (contentElementToShow) {
          contentElementToShow.classList.remove("hidden");
        }
      }

      changeHeadingStyle(
        button,
        ["text-[#FFD000]", "dark:text-[#FFD000]"],
        ["text-neutral-800", "dark:text-neutral-200"]
      );
    }

    function changeHeadingStyle(
      button: any,
      addClasses: any,
      removeClasses: any
    ) {
      let heading = button.querySelector("span");
      if (heading) {
        heading.classList.remove(...removeClasses);
        heading.classList.add(...addClasses);
      }
    }

    const tabButtons = document.querySelectorAll("[data-target]");

    if (tabButtons.length > 0) {
      changeHeadingStyle(
        tabButtons[0],
        ["text-[#FFD000]", "dark:text-[#FFD000]"],
        []
      );
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        tabButtons.forEach((btn) => setButtonInactive(btn, button));
        activateButton(button);
      });
    });
  });
</script>
<script define:vars={{ dataSrc, imageNotFound }}>
  document.addEventListener("DOMContentLoaded", () => {
    const images = document.querySelectorAll("img[data-fullscreen-src]");
    const modal = document.getElementById("fullscreen-modal");
    const modalImage = document.getElementById("fullscreen-image");
    const closeModalButton = document.getElementById("close-modal");
    const rightModalButton = document.getElementById("right-modal");
    const leftModalButton = document.getElementById("left-modal");

    let currentIndex = 0;

    // Modal image gallery functionality
    images.forEach((img) => {
      img.addEventListener("click", () => {
        currentIndex = dataSrc.indexOf(img.currentSrc);
        modalImage.src = img.currentSrc;
        modal.classList.remove("hidden");
      });
    });

    closeModalButton.addEventListener("click", () => {
      modal.classList.add("hidden");
    });

    rightModalButton.addEventListener("click", () => {
      currentIndex = ((currentIndex + 1) > (dataSrc.length - 1)) ? 0 : (currentIndex + 1);
      modalImage.src = dataSrc[currentIndex] ?? imageNotFound.src;
    });

    leftModalButton.addEventListener("click", () => {
      currentIndex = ((currentIndex - 1) < 0) ? (dataSrc.length - 1) : (currentIndex - 1);
      modalImage.src = dataSrc[currentIndex] ?? imageNotFound.src;
    });

    // Close on outside click
    modal.addEventListener("click", (event) => {
      if (event.target === modal) {
        modal.classList.add("hidden");
      }
    });
  });
</script>